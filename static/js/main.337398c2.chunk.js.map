{"version":3,"sources":["components/drawField/drawField.js","App.js","index.js"],"names":["DrawField","this","props","gameField","map","row","cell","i","className","key","React","PureComponent","App","state","firstMove","arrow","score","overGame","checkForOverGame","moveDown","canMoveDown","moveUp","canMoveUp","moveLeft","canMoveLeft","moveRight","setState","newItemPosition","randomCell","x","Math","random","toFixed","y","newItem","probIdx","newField","canMoveRight","check","canMove","length","j","z","rightDirection","currentField","updateField","unshift","push","rowCounter","double","leftDirection","upDirection","counterUp","upperPosition","downDirection","counterDown","downPosition","chooseDirection","reset","document","documentElement","addEventListener","e","path","onClick","type","style","zIndex","display","Component","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.337398c2.chunk.js","sourcesContent":["import React from 'react';\n\nclass DrawField extends React.PureComponent {\n  render() {\n    const { gameField } = this.props;\n\n    return (\n      gameField.map(row => row.map((cell, i) => (\n        <div\n          className={cell === 0 ? 'cell' : `cell__${cell} cell`}\n          key={i}\n        >\n          {cell === 0 ? '' : cell}\n        </div>\n      ))\n      )\n    )\n  }\n}\n\n\nexport default DrawField;","import React from 'react';\nimport './App.scss';\nimport DrawField from './components/drawField/drawField';\n\nclass App extends React.Component {\n  state = {\n    gameField: [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ],\n\n    firstMove: true,\n    arrow: '',\n    score: 0,\n    overGame: false,\n  }\n\n  componentDidMount() {\n    document.documentElement.addEventListener('keydown', (e) => {\n      let path = ''\n      if (e.key === 'ArrowRight') {\n        path = 'right'\n      } else if (e.key === 'ArrowLeft') {\n        path = 'left'\n      } else if (e.key === 'ArrowUp') {\n        path = 'up'\n      } else if (e.key === 'ArrowDown') {\n        path = 'down'\n      }\n\n      this.setState(({ arrow: path }));\n    });\n  }\n\n  checkForOverGame = () => {\n    const moveDown = this.canMoveDown(true);\n    const moveUp = this.canMoveUp(true);\n    const moveLeft = this.canMoveLeft(true);\n    const moveRight = this.canMoveUp(true);\n\n    if (!moveDown && !moveUp && !moveLeft && !moveRight) {\n      this.setState({ overGame: true });\n    }\n  }\n\n  newItemPosition = () => {\n    this.setState(({ firstMove: false }));\n    let randomCell = {\n      x: +(Math.random() * (3 - 0) + 0).toFixed(0),\n      y: +(Math.random() * (3 - 0) + 0).toFixed(0),\n    }\n\n    if (this.state.gameField[randomCell.x][randomCell.y] === 0) {\n      this.newItem(randomCell.x, randomCell.y);\n    } else {\n      this.newItemPosition();\n    }\n    this.checkForOverGame();\n  }\n\n  newItem = (x, y) => {\n    const probability = [2, 4, 2, 2, 4, 2, 2, 2, 2, 2, 2, 2, 2, 8, 2];\n    const probIdx = (Math.random() * (14 - 0) + 0).toFixed(0);\n    const newField = [...this.state.gameField];\n    newField[x][y] = probability[probIdx];\n    this.setState(() => ({ gameField: newField }));\n    this.checkForOverGame();\n  }\n\n  canMoveRight = (check) => {\n    const { gameField } = this.state;\n    let x = null;\n    let y = null;\n    let canMove = false;\n\n    for (let i = 0; i < gameField.length; i++) {\n      for (let j = 0; j < gameField[i].length; j++) {\n        if (gameField[i][j] !== 0) {\n          x = i;\n          y = j;\n          break;\n        }\n      }\n\n      if (typeof x === 'number' && typeof y === 'number') {\n        for (let z = y + 1; z < gameField[x].length; z++) {\n          if (gameField[x][z] === 0) {\n            canMove = true;\n            break;\n          }\n        }\n      }\n    }\n\n    for (let i = 0; i < gameField.length; i++) {\n      for (let j = gameField[i].length; j >= 0; j--) {\n        if (j - 1 >= 0\n          && gameField[i][j] !== 0\n          && gameField[i][j] === gameField[i][j - 1]) {\n          canMove = true;\n          break;\n        }\n      }\n    }\n\n    if (check) {\n      return canMove;\n    } else if (canMove && !check) {\n      this.rightDirection();\n    }\n  }\n\n  rightDirection = () => {\n    const { gameField } = this.state;\n    const currentField = [];\n    const updateField = [];\n\n    for (let i = 0; i < gameField.length; i++) {\n      let row = []\n      for (let j = 0; j < gameField[i].length; j++) {\n        if (gameField[i][j] === 0) {\n          row.unshift(gameField[i][j])\n        } else {\n          row.push(gameField[i][j])\n        }\n      }\n      updateField.push(row)\n    }\n\n    for (let i = 0; i < updateField.length; i++) {\n      let row = [];\n      let rowCounter = 3\n      const length = updateField[i].length - 1\n      for (let j = length; j >= 0; j--) {\n        if (j - 1 >= 0 && updateField[i][j] === updateField[i][j - 1]) {\n          const double = updateField[i][j] * 2;\n          this.setState(state => ({ score: state.score + double }));\n          row[rowCounter] = double;\n          j--;\n          rowCounter--;\n          continue;\n        }\n        row[rowCounter] = updateField[i][j]\n        rowCounter--\n      }\n\n      for (let z = 0; z < row.length; z++) {\n        if (!row[z]) {\n          row[z] = 0\n        }\n      }\n      currentField.push(row)\n    }\n    this.setState(() => ({ gameField: currentField, arrow: '' }), () => this.newItemPosition());\n  }\n\n  canMoveLeft = (check) => {\n    const { gameField } = this.state;\n    let x = null;\n    let y = null;\n    let canMove = false\n    for (let i = 0; i < gameField.length; i++) {\n      for (let j = gameField[i].length - 1; j >= 0; j--) {\n        if (gameField[i][j] !== 0) {\n          x = i;\n          y = j;\n          break;\n        }\n      }\n\n      if (typeof x === 'number' && typeof y === 'number') {\n        for (let z = y - 1; z >= 0; z--) {\n          if (gameField[x][z] === 0) {\n            canMove = true;\n          }\n        }\n      }\n    }\n\n    for (let i = 0; i < gameField.length; i++) {\n      for (let j = 0; j < gameField[i].length; j++) {\n        if (j + 1 < gameField.length\n          && gameField[i][j] !== 0\n          && gameField[i][j] === gameField[i][j + 1]) {\n          canMove = true;\n        }\n      }\n    }\n\n    if (check) {\n      return canMove;\n    } else if (canMove && !check) {\n      this.leftDirection();\n    }\n  }\n\n  leftDirection = () => {\n    const { gameField } = this.state;\n    const currentField = [];\n    const updateField = [];\n\n    for (let i = 0; i < gameField.length; i++) {\n      let row = []\n      for (let j = gameField[i].length - 1; j >= 0; j--) {\n        if (gameField[i][j] === 0) {\n          row.push(gameField[i][j])\n        } else {\n          row.unshift(gameField[i][j])\n        }\n      }\n      updateField.push(row)\n    }\n\n    for (let i = 0; i < updateField.length; i++) {\n      let row = [];\n      let rowCounter = 0\n      for (let j = 0; j < updateField[i].length; j++) {\n        if (j + 1 < updateField[i].length\n          && updateField[i][j] === updateField[i][j + 1]) {\n          const double = updateField[i][j] * 2;\n          this.setState(state => ({ score: state.score + double }));\n          row[rowCounter] = double;\n          j++;\n          rowCounter++;\n          continue;\n        }\n        row[rowCounter] = updateField[i][j]\n        rowCounter++\n      }\n      for (let z = 0; z < 4; z++) {\n        if (!row[z]) {\n          row[z] = 0\n        }\n      }\n      currentField.push(row)\n    }\n    this.setState(() => ({ gameField: currentField, arrow: '' }), () => this.newItemPosition());\n  }\n\n  canMoveUp = (check) => {\n    const { gameField } = this.state;\n    let canMove = false;\n\n    for (let i = gameField.length - 1; i >= 0; i--) {\n      for (let j = 0; j < gameField[i].length; j++) {\n        if (gameField[i][j] !== 0) {\n          for (let z = i; z >= 0; z--) {\n            if (gameField[z][j] === 0) {\n              canMove = true;\n            }\n          }\n        }\n      }\n    }\n\n    for (let i = gameField.length - 1; i >= 0; i--) {\n      for (let j = 0; j < gameField[i].length; j++) {\n        if (i - 1 >= 0\n          && gameField[i][j] !== 0\n          && gameField[i][j] === gameField[i - 1][j]) {\n          canMove = true;\n        }\n      }\n    }\n\n    if (check) {\n      return canMove;\n    } else if (canMove && !check) {\n      this.upDirection();\n    }\n  }\n\n  upDirection = () => {\n    const { gameField } = this.state;\n    const currentField = [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ];\n    const updateField = [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ];\n\n    let counterUp = 0;\n    for (let i = 0; i < gameField.length; i++) {\n      for (let j = 0; j < gameField[i].length; j++) {\n        let upperPosition = false;\n        if (gameField[i][j] !== 0) {\n\n          while (!upperPosition) {\n            if (currentField[counterUp][j] === 0) {\n              currentField[counterUp][j] = gameField[i][j];\n              counterUp = 0;\n              upperPosition = true;\n            } else {\n              counterUp++;\n            }\n          }\n        }\n      }\n    }\n    let j = 0;\n\n    while (j <= 3) {\n      for (let i = 0; i < currentField.length; i++) {\n        if (i + 1 < currentField.length\n          && currentField[i][j] === currentField[i + 1][j]\n          && currentField[i][j]) {\n          const double = currentField[i][j] * 2;\n          this.setState(state => ({ score: state.score + double }));\n          i++;\n          let upperPosition = false;\n          let rowCounter = 0;\n          while (!upperPosition) {\n            if (updateField[rowCounter][j] === 0) {\n              updateField[rowCounter][j] = double;\n              upperPosition = true;\n            } else {\n              rowCounter++;\n            }\n          }\n          continue;\n        }\n\n        if (currentField[i][j] !== 0) {\n          let upperPosition = false;\n          let rowCounter = 0;\n          while (!upperPosition) {\n            if (updateField[rowCounter][j] === 0) {\n              updateField[rowCounter][j] = currentField[i][j];\n              upperPosition = true;\n            } else {\n              rowCounter++;\n            }\n          }\n        }\n      }\n      j++;\n    }\n\n    this.setState(() => ({ gameField: updateField, arrow: '' }),\n      () => this.newItemPosition());\n  }\n\n  canMoveDown = (check) => {\n    const { gameField } = this.state;\n    let canMove = false;\n    for (let i = 0; i < gameField.length; i++) {\n      for (let j = 0; j < gameField[i].length; j++) {\n        if (gameField[i][j] !== 0) {\n          for (let z = i; z < gameField.length; z++) {\n            if (gameField[z][j] === 0) {\n              canMove = true;\n            }\n          }\n        }\n      }\n    }\n\n    for (let i = 0; i < gameField.length; i++) {\n      for (let j = 0; j < gameField[i].length; j++) {\n        if (i + 1 < gameField.length\n          && gameField[i][j] !== 0\n          && gameField[i][j] === gameField[i + 1][j]) {\n          canMove = true\n        }\n      }\n    }\n\n    if (check) {\n      return canMove;\n    } else if (canMove && !check) {\n      this.downDirection();\n    }\n  }\n\n  downDirection = () => {\n    const { gameField } = this.state;\n    const currentField = [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ];\n    const updateField = [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ];\n    let counterDown = 3;\n    for (let i = gameField.length - 1; i >= 0; i--) {\n      for (let j = 0; j < gameField[i].length; j++) {\n        let downPosition = false;\n        if (gameField[i][j] !== 0) {\n          while (!downPosition) {\n            if (currentField[counterDown][j] === 0) {\n              currentField[counterDown][j] = gameField[i][j]\n              counterDown = 3;\n              downPosition = true;\n            } else {\n              counterDown--;\n            }\n          }\n        }\n      }\n    }\n\n    let j = 0;\n\n    while (j <= 3) {\n      for (let i = currentField.length - 1; i >= 0; i--) {\n        if (i - 1 >= 0\n          && currentField[i][j] === currentField[i - 1][j]\n          && currentField[i][j]) {\n          const double = currentField[i][j] * 2;\n          this.setState(state => ({ score: state.score + double }));\n          i--;\n          let downPosition = false;\n          let rowCounter = 3;\n          while (!downPosition) {\n            if (updateField[rowCounter][j] === 0) {\n              updateField[rowCounter][j] = double;\n              downPosition = true;\n            } else {\n              rowCounter--;\n            }\n          }\n          continue;\n        }\n\n        if (currentField[i][j] !== 0) {\n          let downPosition = false;\n          let rowCounter = 3;\n          while (!downPosition) {\n            if (updateField[rowCounter][j] === 0) {\n              updateField[rowCounter][j] = currentField[i][j];\n              downPosition = true;\n            } else {\n              rowCounter--;\n            }\n          }\n        }\n      }\n      j++;\n    }\n\n    this.setState(() => ({ gameField: updateField, arrow: '' }),\n      () => this.newItemPosition());\n  }\n\n  chooseDirection = (arrow) => {\n    switch (arrow) {\n      case 'right':\n        this.canMoveRight()\n        break;\n\n      case 'left':\n        this.canMoveLeft()\n        break;\n\n      case 'up':\n        this.canMoveUp()\n        break;\n\n      case 'down':\n        this.canMoveDown()\n        break;\n\n      default:\n        break;\n    }\n  }\n\n  reset = () => {\n    this.setState(() => ({\n      gameField: [\n        [0, 0, 0, 0],\n        [0, 0, 0, 0],\n        [0, 0, 0, 0],\n        [0, 0, 0, 0],\n      ],\n\n      firstMove: true,\n      arrow: '',\n      score: 0,\n      overGame: false,\n    }))\n  }\n\n  render() {\n    const { gameField, firstMove, arrow, score, overGame } = this.state\n    if (firstMove) {\n      this.newItemPosition();\n    }\n\n    if (arrow && !overGame) {\n      this.chooseDirection(arrow);\n    }\n\n    return (\n      <>\n        <div className=\"container\">\n          <button\n            onClick={this.reset}\n            type=\"button\"\n            className=\"newGame\"\n          >\n            New Game\n        </button>\n          <h1 className=\"score\">Score <br />\n            <span className=\"currentScore\">\n              {score}\n            </span>\n          </h1>\n        </div>\n        <div\n          className=\"field\"\n          style={overGame ? { zIndex: \"-2\" } : { zIndex: \"0\" }}\n        >\n          <DrawField\n            gameField={gameField}\n          />\n        </div>\n        <div\n          className=\"gameOverDiv\"\n          style={overGame\n            ? { zIndex: \"2\", display: \"block\" }\n            : { zIndex: \"-2\", display: \"none\" }}\n        >\n          <p className=\"gameOverText\">Game over!</p>\n          <p className=\"gameOverScore\">Your score: {score}</p>\n          <p className=\"hint\">Click 'New Game' for start ↑</p>\n        </div>\n      </>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}