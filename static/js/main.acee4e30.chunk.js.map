{"version":3,"sources":["components/drawField/drawField.js","App.js","index.js"],"names":["DrawField","this","props","gameField","map","row","cell","i","className","parseFloat","key","React","PureComponent","App","state","firstMove","arrow","score","overGame","checkForOverGame","console","log","j","moveDown","canMoveDown","moveUp","canMoveUp","moveLeft","canMoveLeft","moveRight","setState","newItemPosition","randomCell","x","Math","random","toFixed","y","newItem","probIdx","newField","canMoveRight","check","canMove","length","z","rightDirection","currentField","updateField","unshift","push","rowCounter","double","leftDirection","upDirection","counterUp","upperPosition","downDirection","counterDown","downPosition","chooseDirection","reset","document","documentElement","addEventListener","e","path","onClick","type","style","zIndex","display","Component","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.acee4e30.chunk.js","sourcesContent":["import React from 'react';\n\nclass DrawField extends React.PureComponent {\n  render() {\n    const { gameField } = this.props;\n\n    return (\n      gameField.map(row => row.map((cell, i) => {\n        return (\n          <div\n            className={cell === 0\n              ? 'cell'\n              : `cell__${parseFloat(cell)} cell`}\n            key={i}\n          >\n            {cell === 0 ? '' : parseFloat(cell)}\n          </div>\n        )\n      })\n      )\n    )\n  }\n}\n\n\nexport default DrawField;","import React from 'react';\nimport './App.scss';\nimport DrawField from './components/drawField/drawField';\n\nclass App extends React.Component {\n  state = {\n    gameField: [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ],\n\n    firstMove: true,\n    arrow: '',\n    score: 0,\n    overGame: false,\n  }\n\n  componentDidMount() {\n    document.documentElement.addEventListener('keydown', (e) => {\n      let path = ''\n      if (e.key === 'ArrowRight') {\n        path = 'right'\n      } else if (e.key === 'ArrowLeft') {\n        path = 'left'\n      } else if (e.key === 'ArrowUp') {\n        path = 'up'\n      } else if (e.key === 'ArrowDown') {\n        path = 'down'\n      }\n\n      this.setState(({ arrow: path }));\n    });\n  }\n\n  checkForOverGame = () => {\n    const { gameField } = this.state;\n    console.log(gameField);\n    for (let i = 0; i < gameField; i++) {\n      for (let j = 0; j < gameField[i]; j++) {\n        if (gameField[i][j] === 0) {\n          return;\n        }\n      }\n    }\n\n    const moveDown = this.canMoveDown(true);\n    const moveUp = this.canMoveUp(true);\n    const moveLeft = this.canMoveLeft(true);\n    const moveRight = this.canMoveUp(true);\n\n    if (!moveDown && !moveUp && !moveLeft && !moveRight) {\n      this.setState({ overGame: true });\n    }\n  }\n\n  newItemPosition = () => {\n    this.setState(({ firstMove: false }));\n    let randomCell = {\n      x: +(Math.random() * (3 - 0) + 0).toFixed(0),\n      y: +(Math.random() * (3 - 0) + 0).toFixed(0),\n    }\n\n    if (this.state.gameField[randomCell.x][randomCell.y] === 0) {\n      this.newItem(randomCell.x, randomCell.y);\n    } else {\n      this.newItemPosition();\n    }\n    this.checkForOverGame();\n  }\n\n  newItem = (x, y) => {\n    const probability = [2, 4, 2, 2, 4, 2, 2, 2, 2, 2, 2, 2, 2, 8, 2];\n    const probIdx = (Math.random() * (14 - 0) + 0).toFixed(0);\n    const newField = [...this.state.gameField];\n    newField[x][y] = probability[probIdx];\n    this.setState(() => ({ gameField: newField }));\n\n    this.checkForOverGame();\n  }\n\n  canMoveRight = (check) => {\n    const { gameField } = this.state;\n    let x = null;\n    let y = null;\n    let canMove = false;\n\n    for (let i = 0; i < gameField.length; i++) {\n      for (let j = 0; j < gameField[i].length; j++) {\n        if (gameField[i][j] !== 0) {\n          x = i;\n          y = j;\n          break;\n        }\n      }\n\n      if (typeof x === 'number' && typeof y === 'number') {\n        for (let z = y + 1; z < gameField[x].length; z++) {\n          if (gameField[x][z] === 0) {\n            canMove = true;\n            break;\n          }\n        }\n      }\n    }\n\n    for (let i = 0; i < gameField.length; i++) {\n      for (let j = gameField[i].length; j >= 0; j--) {\n        if (j - 1 >= 0\n          && gameField[i][j] !== 0\n          && gameField[i][j] === gameField[i][j - 1]) {\n          canMove = true;\n          break;\n        }\n      }\n    }\n\n    if (check) {\n      return canMove;\n    } else if (canMove && !check) {\n      this.rightDirection();\n    }\n  }\n\n  rightDirection = () => {\n    const { gameField } = this.state;\n    const currentField = [];\n    const updateField = [];\n\n    for (let i = 0; i < gameField.length; i++) {\n      let row = []\n      for (let j = 0; j < gameField[i].length; j++) {\n        if (gameField[i][j] === 0) {\n          row.unshift(gameField[i][j])\n        } else {\n          row.push(gameField[i][j])\n        }\n      }\n      updateField.push(row)\n    }\n\n    for (let i = 0; i < updateField.length; i++) {\n      let row = [];\n      let rowCounter = 3\n      const length = updateField[i].length - 1\n      for (let j = length; j >= 0; j--) {\n        if (j - 1 >= 0 && updateField[i][j] === updateField[i][j - 1]) {\n          const double = updateField[i][j] * 2;\n          this.setState(state => ({ score: state.score + double }));\n          row[rowCounter] = double;\n          j--;\n          rowCounter--;\n          continue;\n        }\n        row[rowCounter] = updateField[i][j]\n        rowCounter--\n      }\n\n      for (let z = 0; z < row.length; z++) {\n        if (!row[z]) {\n          row[z] = 0\n        }\n      }\n      currentField.push(row)\n    }\n\n    this.setState(() => ({ gameField: currentField, arrow: '' }), () => this.newItemPosition());\n  }\n\n  canMoveLeft = (check) => {\n    const { gameField } = this.state;\n    let x = null;\n    let y = null;\n    let canMove = false\n    for (let i = 0; i < gameField.length; i++) {\n      for (let j = gameField[i].length - 1; j >= 0; j--) {\n        if (gameField[i][j] !== 0) {\n          x = i;\n          y = j;\n          break;\n        }\n      }\n\n      if (typeof x === 'number' && typeof y === 'number') {\n        for (let z = y - 1; z >= 0; z--) {\n          if (gameField[x][z] === 0) {\n            canMove = true;\n          }\n        }\n      }\n    }\n\n    for (let i = 0; i < gameField.length; i++) {\n      for (let j = 0; j < gameField[i].length; j++) {\n        if (j + 1 < gameField.length\n          && gameField[i][j] !== 0\n          && gameField[i][j] === gameField[i][j + 1]) {\n          canMove = true;\n        }\n      }\n    }\n\n    if (check) {\n      return canMove;\n    } else if (canMove && !check) {\n      this.leftDirection();\n    }\n  }\n\n  leftDirection = () => {\n    const { gameField } = this.state;\n    const currentField = [];\n    const updateField = [];\n\n    for (let i = 0; i < gameField.length; i++) {\n      let row = []\n      for (let j = gameField[i].length - 1; j >= 0; j--) {\n        if (gameField[i][j] === 0) {\n          row.push(gameField[i][j])\n        } else {\n          row.unshift(gameField[i][j])\n        }\n      }\n      updateField.push(row)\n    }\n\n    for (let i = 0; i < updateField.length; i++) {\n      let row = [];\n      let rowCounter = 0\n      for (let j = 0; j < updateField[i].length; j++) {\n        if (j + 1 < updateField[i].length\n          && updateField[i][j] === updateField[i][j + 1]) {\n          const double = updateField[i][j] * 2;\n          this.setState(state => ({ score: state.score + double }));\n          row[rowCounter] = double;\n          j++;\n          rowCounter++;\n          continue;\n        }\n        row[rowCounter] = updateField[i][j]\n        rowCounter++\n      }\n      for (let z = 0; z < 4; z++) {\n        if (!row[z]) {\n          row[z] = 0\n        }\n      }\n      currentField.push(row)\n    }\n    this.setState(() => ({ gameField: currentField, arrow: '' }), () => this.newItemPosition());\n  }\n\n  canMoveUp = (check) => {\n    const { gameField } = this.state;\n    let canMove = false;\n\n    for (let i = gameField.length - 1; i >= 0; i--) {\n      for (let j = 0; j < gameField[i].length; j++) {\n        if (gameField[i][j] !== 0) {\n          for (let z = i; z >= 0; z--) {\n            if (gameField[z][j] === 0) {\n              canMove = true;\n            }\n          }\n        }\n      }\n    }\n\n    for (let i = gameField.length - 1; i >= 0; i--) {\n      for (let j = 0; j < gameField[i].length; j++) {\n        if (i - 1 >= 0\n          && gameField[i][j] !== 0\n          && gameField[i][j] === gameField[i - 1][j]) {\n          canMove = true;\n        }\n      }\n    }\n\n    if (check) {\n      return canMove;\n    } else if (canMove && !check) {\n      this.upDirection();\n    }\n  }\n\n  upDirection = () => {\n    const { gameField } = this.state;\n    const currentField = [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ];\n    const updateField = [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ];\n\n    let counterUp = 0;\n    for (let i = 0; i < gameField.length; i++) {\n      for (let j = 0; j < gameField[i].length; j++) {\n        let upperPosition = false;\n        if (gameField[i][j] !== 0) {\n\n          while (!upperPosition) {\n            if (currentField[counterUp][j] === 0) {\n              currentField[counterUp][j] = gameField[i][j];\n              counterUp = 0;\n              upperPosition = true;\n            } else {\n              counterUp++;\n            }\n          }\n        }\n      }\n    }\n    let j = 0;\n\n    while (j <= 3) {\n      for (let i = 0; i < currentField.length; i++) {\n        if (i + 1 < currentField.length\n          && currentField[i][j] === currentField[i + 1][j]\n          && currentField[i][j]) {\n          const double = currentField[i][j] * 2;\n          this.setState(state => ({ score: state.score + double }));\n          i++;\n          let upperPosition = false;\n          let rowCounter = 0;\n          while (!upperPosition) {\n            if (updateField[rowCounter][j] === 0) {\n              updateField[rowCounter][j] = double;\n              upperPosition = true;\n            } else {\n              rowCounter++;\n            }\n          }\n          continue;\n        }\n\n        if (currentField[i][j] !== 0) {\n          let upperPosition = false;\n          let rowCounter = 0;\n          while (!upperPosition) {\n            if (updateField[rowCounter][j] === 0) {\n              updateField[rowCounter][j] = currentField[i][j];\n              upperPosition = true;\n            } else {\n              rowCounter++;\n            }\n          }\n        }\n      }\n      j++;\n    }\n\n    this.setState(() => ({ gameField: updateField, arrow: '' }),\n      () => this.newItemPosition());\n  }\n\n  canMoveDown = (check) => {\n    const { gameField } = this.state;\n    let canMove = false;\n    for (let i = 0; i < gameField.length; i++) {\n      for (let j = 0; j < gameField[i].length; j++) {\n        if (gameField[i][j] !== 0) {\n          for (let z = i; z < gameField.length; z++) {\n            if (gameField[z][j] === 0) {\n              canMove = true;\n            }\n          }\n        }\n      }\n    }\n\n    for (let i = 0; i < gameField.length; i++) {\n      for (let j = 0; j < gameField[i].length; j++) {\n        if (i + 1 < gameField.length\n          && gameField[i][j] !== 0\n          && gameField[i][j] === gameField[i + 1][j]) {\n          canMove = true\n        }\n      }\n    }\n\n    if (check) {\n      return canMove;\n    } else if (canMove && !check) {\n      this.downDirection();\n    }\n  }\n\n  downDirection = () => {\n    const { gameField } = this.state;\n    const currentField = [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ];\n    const updateField = [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ];\n    let counterDown = 3;\n    for (let i = gameField.length - 1; i >= 0; i--) {\n      for (let j = 0; j < gameField[i].length; j++) {\n        let downPosition = false;\n        if (gameField[i][j] !== 0) {\n          while (!downPosition) {\n            if (currentField[counterDown][j] === 0) {\n              currentField[counterDown][j] = gameField[i][j]\n              counterDown = 3;\n              downPosition = true;\n            } else {\n              counterDown--;\n            }\n          }\n        }\n      }\n    }\n\n    let j = 0;\n\n    while (j <= 3) {\n      for (let i = currentField.length - 1; i >= 0; i--) {\n        if (i - 1 >= 0\n          && currentField[i][j] === currentField[i - 1][j]\n          && currentField[i][j]) {\n          const double = currentField[i][j] * 2;\n          this.setState(state => ({ score: state.score + double }));\n          i--;\n          let downPosition = false;\n          let rowCounter = 3;\n          while (!downPosition) {\n            if (updateField[rowCounter][j] === 0) {\n              updateField[rowCounter][j] = double;\n              downPosition = true;\n            } else {\n              rowCounter--;\n            }\n          }\n          continue;\n        }\n\n        if (currentField[i][j] !== 0) {\n          let downPosition = false;\n          let rowCounter = 3;\n          while (!downPosition) {\n            if (updateField[rowCounter][j] === 0) {\n              updateField[rowCounter][j] = currentField[i][j];\n              downPosition = true;\n            } else {\n              rowCounter--;\n            }\n          }\n        }\n      }\n      j++;\n    }\n\n    this.setState(() => ({ gameField: updateField, arrow: '' }),\n      () => this.newItemPosition());\n  }\n\n  chooseDirection = (arrow) => {\n    switch (arrow) {\n      case 'right':\n        this.canMoveRight()\n        break;\n\n      case 'left':\n        this.canMoveLeft()\n        break;\n\n      case 'up':\n        this.canMoveUp()\n        break;\n\n      case 'down':\n        this.canMoveDown()\n        break;\n\n      default:\n        break;\n    }\n  }\n\n  reset = () => {\n    this.setState(() => ({\n      gameField: [\n        [0, 0, 0, 0],\n        [0, 0, 0, 0],\n        [0, 0, 0, 0],\n        [0, 0, 0, 0],\n      ],\n\n      firstMove: true,\n      arrow: '',\n      score: 0,\n      overGame: false,\n    }))\n  }\n\n  render() {\n    const { gameField, firstMove, arrow, score, overGame } = this.state\n    if (firstMove) {\n      this.newItemPosition();\n    }\n\n    if (arrow && !overGame) {\n      this.chooseDirection(arrow);\n    }\n\n    return (\n      <>\n        <div className=\"container\">\n          <button\n            onClick={this.reset}\n            type=\"button\"\n            className=\"newGame\"\n          >\n            New Game\n        </button>\n          <h1 className=\"score\">Score <br />\n            <span className=\"currentScore\">\n              {score}\n            </span>\n          </h1>\n        </div>\n\n        <div\n          className=\"field\"\n          style={overGame ? { zIndex: \"-2\" } : { zIndex: \"0\" }}\n        >\n          <DrawField\n            gameField={gameField}\n          />\n        </div>\n        <div\n          className=\"gameOverDiv\"\n          style={overGame\n            ? { zIndex: \"2\", display: \"block\" }\n            : { zIndex: \"-2\", display: \"none\" }}\n        >\n          <p className=\"gameOverText\">Game over!</p>\n          <p className=\"gameOverScore\">Your score: {score}</p>\n          <p className=\"hint\">Click 'New Game' for start ↑</p>\n        </div>\n      </>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}